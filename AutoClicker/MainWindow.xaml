<metro:MetroWindow x:Class="AutoClicker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:metro="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:local="clr-namespace:AutoClicker"
        xmlns:c="clr-namespace:AutoClicker.Classes"
        mc:Ignorable="d"
        UseLayoutRounding="True"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        Background="{DynamicResource MaterialDesignPaper}"
        FontFamily="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto"
        GlowBrush="{DynamicResource AccentColorBrush}"
        BorderThickness="1" WindowStartupLocation="CenterScreen"
        Title="ClickBot" TitleCaps="False" Closed="WindowClosed"
        Icon="Resources/icon.ico" ShowIconOnTitleBar="False"
        Height="400" Width="550" MinHeight="200" MinWidth="400">

    <!--Titlebar buttons-->
    <metro:MetroWindow.RightWindowCommands>
        <metro:WindowCommands>
            <Button Content="{DynamicResource About}" Click="ShowAbout" />
        </metro:WindowCommands>
    </metro:MetroWindow.RightWindowCommands>

    <!--Window resources-->
    <metro:MetroWindow.Resources>
        <!--Dictionaries-->
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/MainWindow.Dictionary.xaml"/>
                <ResourceDictionary Source="Localization/MainWindow.en-US.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </metro:MetroWindow.Resources>

    <materialDesign:DialogHost Identifier="RootDialog" Focusable="False">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!--Line 1 - Bots list-->
            <DataGrid Name="dataGrid_Processes" Grid.Row="0" ItemsSource="{Binding ClickBots}" AutoGenerateColumns="False" SelectionUnit="Cell" CanUserResizeRows="False">
                <DataGrid.Resources>
                    <!--Context menu-->
                    <ContextMenu x:Key="DataRowContextMenu" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                        <MenuItem Header="{DynamicResource Start}" Command="{Binding StartCommand}" IsEnabled="{Binding Path=IsRunning, Converter={StaticResource InverseBooleanConverter}}"/>
                        <MenuItem Header="{DynamicResource Stop}" Command="{Binding StopCommand}" IsEnabled="{Binding Path=IsRunning}"/>
                        <Separator />
                        <MenuItem Header="{DynamicResource Delete}" IsEnabled="{Binding Path=IsRunning, Converter={StaticResource InverseBooleanConverter}}" Click="DeleteBot"/>
                    </ContextMenu>
                </DataGrid.Resources>

                <DataGrid.Columns>
                    <materialDesign:MaterialDataGridTextColumn Binding="{Binding ProcessName, UpdateSourceTrigger=PropertyChanged}" Width="Auto" EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}">
                        <materialDesign:MaterialDataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource ProcessName}" />
                        </materialDesign:MaterialDataGridTextColumn.Header>
                    </materialDesign:MaterialDataGridTextColumn>

                    <materialDesign:MaterialDataGridTextColumn Header="X" Binding="{Binding X, UpdateSourceTrigger=PropertyChanged, TargetNullValue={x:Static sys:String.Empty}}" Width="Auto" EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"/>
                    <materialDesign:MaterialDataGridTextColumn Header="Y" Binding="{Binding Y, UpdateSourceTrigger=PropertyChanged, TargetNullValue={x:Static sys:String.Empty}}" Width="Auto" EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"/>

                    <materialDesign:MaterialDataGridTextColumn Binding="{Binding Path=Delay, UpdateSourceTrigger=PropertyChanged, TargetNullValue={x:Static sys:String.Empty}}" Width="Auto" EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}">
                        <materialDesign:MaterialDataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource Delay}" />
                        </materialDesign:MaterialDataGridTextColumn.Header>
                    </materialDesign:MaterialDataGridTextColumn>

                    <materialDesign:MaterialDataGridTextColumn Binding="{Binding Path=ReleaseDelay, UpdateSourceTrigger=PropertyChanged, TargetNullValue={x:Static sys:String.Empty}}" Width="Auto" EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}">
                        <materialDesign:MaterialDataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource ReleaseDelay}" />
                        </materialDesign:MaterialDataGridTextColumn.Header>
                    </materialDesign:MaterialDataGridTextColumn>

                    <materialDesign:MaterialDataGridTextColumn Binding="{Binding Path=State, Converter={StaticResource StatutConverter}}" Width="Auto" IsReadOnly="True" SortMemberPath="IsRunning">
                        <materialDesign:MaterialDataGridTextColumn.Header>
                            <TextBlock Text="{DynamicResource State}" />
                        </materialDesign:MaterialDataGridTextColumn.Header>
                    </materialDesign:MaterialDataGridTextColumn>
                </DataGrid.Columns>

                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}" />
                        <Setter Property="ContextMenu" Value="{StaticResource DataRowContextMenu}" />

                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsError}" Value="True">
                                <Setter Property="Background" Value="#33F44336"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsRunning}" Value="True">
                                <Setter Property="Background" Value="#334CAF50"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
            </DataGrid>

            <!--Line 2 - Buttons-->
            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0" Text="by Thomas Ferrone" VerticalAlignment="Bottom" Margin="10,0,0,10" Foreground="Gray" FontSize="10"/>

                <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="5,5">
                    <Button Style="{DynamicResource MaterialDesignFlatButton}" Content="{DynamicResource Hotkeys}" Click="ShowShortcuts"/>
                    <Button Style="{DynamicResource MaterialDesignFlatButton}" Content="{DynamicResource StartAll}" Click="StartAll"/>
                    <Button Style="{DynamicResource MaterialDesignFlatButton}" Content="{DynamicResource StopAll}" Click="StopAll"/>
                </StackPanel>
            </Grid>
        </Grid>
    </materialDesign:DialogHost>
</metro:MetroWindow>
